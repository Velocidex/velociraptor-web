<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Velociraptor Documentation on Velociraptor - Hunt Evil!</title>
    <link>/docs/</link>
    <description>Recent content in Velociraptor Documentation on Velociraptor - Hunt Evil!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Velociraptor Documentation</title>
      <link>/docs/documentation/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/docs/documentation/</guid>
      <description>Velociraptor is an open source Endpoint DFIR and monitoring tool.
Below you will find some of the most common and helpful pages from our documentation.</description>
    </item>
    
    <item>
      <title>Linux Artifacts</title>
      <link>/docs/artifacts/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/linux/</guid>
      <description>Linux.Applications.Chrome.Extensions Fetch Chrome extensions.
Chrome extensions are installed into the user&amp;rsquo;s home directory. We search for manifest.json files in a known path within each system user&amp;rsquo;s home directory. We then parse the manifest file as JSON.
Many extensions use locale packs to resolve strings like name and description. In this case we detect the default locale and load those locale files. We then resolve the extension&amp;rsquo;s name and description from there.</description>
    </item>
    
    <item>
      <title>Miscelaneous Artifacts</title>
      <link>/docs/artifacts/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/misc/</guid>
      <description>Admin.Client.Upgrade Remotely push new client updates.
NOTE: The updates can be pulled from any web server. You need to ensure they are properly secured with SSL and at least a random nonce in their path. You may configure the Velociraptor server to serve these through the public directory.
   Arg Default Description     clientURL http://127.0.0.1:8000/public/velociraptor.exe    configURL http://127.0.0.1:8000/public/client.config.yaml       View Artifact Source   name: Admin.</description>
    </item>
    
    <item>
      <title>Server Artifacts</title>
      <link>/docs/artifacts/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/server/</guid>
      <description>Server.Alerts.InteractiveShell Velociraptor&amp;rsquo;s interactive shell is a powerful feature. If you want to monitor use of the shell on any clients, simply collect this artifact.
View Artifact name: Server.Alerts.InteractiveShell description: | Velociraptor&#39;s interactive shell is a powerful feature. If you want to monitor use of the shell on any clients, simply collect this artifact. type: SERVER_EVENT sources: - queries: - | SELECT * from watch_monitoring(artifact=&#39;Shell&#39;)  
Server.Alerts.PsExec Send an email if execution of the psexec service was detected on any client.</description>
    </item>
    
    <item>
      <title>Windows Malware Detection</title>
      <link>/docs/artifacts/detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/detection/</guid>
      <description>Windows.Detection.ProcessMemory Scanning process memory for signals is powerfull technique. This artifact scans processes for a yara signature and when detected, the process memory is dumped and uploaded to the server.
   Arg Default Description     processRegex notepad    yaraRule rule Process {\n strings:\n $a = &amp;ldquo;this is a secret&amp;rdquo; nocase wide\n $b = &amp;ldquo;this is a secret&amp;rdquo; nocase\n condition:\n any of them\n}\n     View Artifact name: Windows.</description>
    </item>
    
    <item>
      <title>Windows Event Monitoring</title>
      <link>/docs/artifacts/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/events/</guid>
      <description>Windows.Events.DNSQueries Monitor all DNS Queries and responses.
This artifact monitors all DNS queries and their responses seen on the endpoint. DNS is a critical source of information for intrusion detection and the best place to collect it is on the endpoint itself (Perimeter collection can only see DNS requests while the endpoint or laptop is inside the enterprise network).
It is recommended to collect this artifact and just archive the results.</description>
    </item>
    
    <item>
      <title>Windows System</title>
      <link>/docs/artifacts/windows_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/windows_system/</guid>
      <description>Windows.Sys.AppcompatShims Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format.
   Arg Default Description     shimKeys HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB\*    customKeys HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom\*\*     View Artifact name: Windows.Sys.AppcompatShims description: | Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format.</description>
    </item>
    
    <item>
      <title>Windows Triage Artifacts</title>
      <link>/docs/artifacts/triage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/triage/</guid>
      <description>Windows.Triage.Collectors.Amcache {{ Query &amp;ldquo;SELECT * FROM Rows&amp;rdquo; }}
View Artifact name: Windows.Triage.Collectors.Amcache description: | {{ Query &amp;quot;SELECT * FROM Rows&amp;quot; }} precondition: SELECT OS From info() where OS = &#39;windows&#39; sources: - queries: - | SELECT * FROM chain( a1={ SELECT * FROM Artifact.Triage.Collection.Upload( type=&amp;quot;Amcache&amp;quot;, accessor=&amp;quot;ntfs&amp;quot;, path=&amp;quot;C:\\Windows\\AppCompat\\Programs\\Amcache.hve&amp;quot;) }, a2={ SELECT * FROM Artifact.Triage.Collection.Upload( type=&amp;quot;Amcache transaction files&amp;quot;, accessor=&amp;quot;ntfs&amp;quot;, path=&amp;quot;C:\\Windows\\AppCompat\\Programs\\Amcache.hve.LOG*&amp;quot;) })  
Windows.Triage.Collectors.BCD Boot Configuration Files.
{{ Query &amp;ldquo;SELECT * FROM Rows&amp;rdquo; }}</description>
    </item>
    
  </channel>
</rss>