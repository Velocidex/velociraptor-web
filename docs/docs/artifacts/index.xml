<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artifact Reference on Velociraptor / Dig deeper</title>
    <link>/docs/artifacts/</link>
    <description>Recent content in Artifact Reference on Velociraptor / Dig deeper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/artifacts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Artifacts</title>
      <link>/docs/artifacts/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/linux/</guid>
      <description>Linux.Applications.Chrome.Extensions Fetch Chrome extensions.
Chrome extensions are installed into the user&amp;rsquo;s home directory. We search for manifest.json files in a known path within each system user&amp;rsquo;s home directory. We then parse the manifest file as JSON.
Many extensions use locale packs to resolve strings like name and description. In this case we detect the default locale and load those locale files. We then resolve the extension&amp;rsquo;s name and description from there.</description>
    </item>
    
    <item>
      <title>Windows System</title>
      <link>/docs/artifacts/windows_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/windows_system/</guid>
      <description>Windows.Sys.AppcompatShims Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format.
   Arg Default Description     shimKeys HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows N &amp;hellip;    customKeys HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows N &amp;hellip;       View Artifact Source   name: Windows.Sys.AppcompatShims description: | Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format.</description>
    </item>
    
    <item>
      <title>Server Artifacts</title>
      <link>/docs/artifacts/server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/server/</guid>
      <description>Server.Alerts.PsExec Send an email if execution of the psexec service was detected on any client. This is a server side artifact.
Note this requires that the Windows.Event.ProcessCreation monitoring artifact be collected from clients.
   Arg Default Description     EmailAddress admin@example.com    MessageTemplate PsExec execution detected at %v: %v for client %v\ &amp;hellip;       View Artifact Source   name: Server.</description>
    </item>
    
    <item>
      <title>Windows Triage Artifacts</title>
      <link>/docs/artifacts/triage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/triage/</guid>
      <description>Windows.Triage.ProcessMemory Dump process memory and upload to the server
   Arg Default Description     processRegex notepad       View Artifact Source   name: Windows.Triage.ProcessMemory description: | Dump process memory and upload to the server precondition: SELECT OS From info() where OS = &#39;windows&#39; parameters: - name: processRegex default: notepad sources: - queries: - | LET processes = SELECT Name as ProcessName, CommandLine, Pid FROM pslist() WHERE Name =~ processRegex - | SELECT * FROM foreach( row=processes, query={ SELECT ProcessName, CommandLine, Pid, FullPath, upload(file=FullPath) as CrashDump FROM proc_dump(pid=Pid) })    Windows.</description>
    </item>
    
    <item>
      <title>Windows Malware Detection</title>
      <link>/docs/artifacts/detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/detection/</guid>
      <description>Windows.Detection.Impersonation An access token is an object that describes the security context of a process or thread. The information in a token includes the identity and privileges of the user account associated with the process or thread. When a user logs on, the system verifies the user&amp;rsquo;s password by comparing it with information stored in a security database.
Every process has a primary token that describes the security context of the user account associated with the process.</description>
    </item>
    
    <item>
      <title>Windows Event Monitoring</title>
      <link>/docs/artifacts/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/events/</guid>
      <description>Windows.Events.DNSQueries Monitor all DNS Queries and responses.
This artifact monitors all DNS queries and their responses seen on the endpoint. DNS is a critical source of information for intrusion detection and the best place to collect it is on the endpoint itself (Perimeter collection can only see DNS requests while the endpoint or laptop is inside the enterprise network).
It is recommended to collect this artifact and just archive the results.</description>
    </item>
    
    <item>
      <title>Miscelaneous Artifacts</title>
      <link>/docs/artifacts/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/misc/</guid>
      <description>Admin.Client.Upgrade Remotely push new client updates.
NOTE: The updates can be pulled from any web server. You need to ensure they are properly secured with SSL and at least a random nonce in their path. You may configure the Velociraptor server to serve these through the public directory. Simply place the MSI in the public directory within the data store and set the URL below.
   Arg Default Description     clientURL http://127.</description>
    </item>
    
    <item>
      <title>Linux Artifacts</title>
      <link>/docs/artifacts/linux/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/artifacts/linux/linux/</guid>
      <description>Linux.Applications.Chrome.Extensions Fetch Chrome extensions.
Chrome extensions are installed into the user&amp;rsquo;s home directory. We search for manifest.json files in a known path within each system user&amp;rsquo;s home directory. We then parse the manifest file as JSON.
Many extensions use locale packs to resolve strings like name and description. In this case we detect the default locale and load those locale files. We then resolve the extension&amp;rsquo;s name and description from there.</description>
    </item>
    
  </channel>
</rss>