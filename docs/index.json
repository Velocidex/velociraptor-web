
[
{
    "uri": "/docs/vql_reference/basic/",
    "title": "Basic VQL functions and plugins",
    "tags": [],
    "description": "",
    "content": "VQL provides a basic set of functions and plugins allowing queries to maniulate data and implement logic. This page details those plugins which are considered foundational to the VQL language and therefore may be useful in all types of artifacts.\nVQL plugins are not the same as VQL functions. A plugin is the subject of the VQL query - i.e. plugins always follow the FROM keyword, while functions (which return a single value instead of a sequence of rows) are only present in column specification (e.g. after SELECT) or in condition clauses (i.e. after the WHERE keyword).\n array Function\nCreate an array with all the args.\nThis function accepts arbitrary arguments and creates an array by flattening the arguments. For example array(a=1, b=2) will return [1, 2].\nYou can use this to flatten a subquery as well:\nSELECT array(a1={ SELECT User FROM Artifact.Windows.System.Users() }) as Users FROM scope() Will return a single row with Users being an array of names.\natoi Function\nConvert a string to an int.\n   Arg Description Type     string A string to convert to int Any (required)    base64decode Function\nDecodes a base64 encoded string.\n   Arg Description Type     string A string to decode string (required)    base64encode Function\nEncodes a string into base64.\n   Arg Description Type     string A string to decode string (required)    basename Function\nReturn the basename of the path.\n   Arg Description Type     path Extract directory name of path string (required)    copy Function\nCopy a file.\n   Arg Description Type     filename The file to copy from. string (required)   accessor The accessor to use string   dest The destination file to write. string (required)   permissions Required permissions (e.g. \u0026lsquo;x\u0026rsquo;). string    count Function\nCounts the items.\n   Arg Description Type     items  Any    dict Function\nConstruct a dict from arbitrary keyword args.\ndirname Function\nReturn the directory path.\n   Arg Description Type     path Extract directory name of path string (required)    encode Function\nEncodes a string as as different type. Currently supported types include \u0026lsquo;hex\u0026rsquo;, \u0026lsquo;base64\u0026rsquo;.\n   Arg Description Type     string  Any (required)   type  string (required)    enumerate Function\nCollect all the items in each group by bin.\n   Arg Description Type     items  Any    environ Function\nGet an environment variable.\n   Arg Description Type     var Extract the var from the environment. string (required)    expand Function\nExpand the path using the environment.\nThis function expands environment variables into the path. It is normally needed after using registry values of type REG_EXPAND_SZ as they typically contain environment strings. Velociraptor does not automatically expand such values since environment variables typically depend on the specific user account which reads the registry value (different user accounts can have different environment variables).\n   Arg Description Type     path A path with environment escapes string (required)    filter Function\nFilters a strings array by regex.\n   Arg Description Type     list A list of items too filter list of string (required)   regex A regex to test each item list of string (required)    format Function\nFormat one or more items according to a format string.\n   Arg Description Type     format Format string to use string (required)   args An array of elements to apply into the format string. Any    get Function\nGets the member field from item.\nThis is useful to index an item from an array. For example:\nExample select get(item=[dict(foo=3), 2, 3, 4], member=\u0026#39;0.foo\u0026#39;) AS Foo from scope() [ { \u0026#34;Foo\u0026#34;: 3 } ]    Arg Description Type     item  Any   member  string   field  string   default  Any    getpid Function\nReturns the current pid of the process.\nhumanize Function\nFormat items in human readable way.\nFormats a byte count in human readable way (e.g. Mb, Gb etc).\n   Arg Description Type     bytes Format bytes with units int64    if Function\nConditional execution of query\nThis function evaluates a condition. Note that the values used in the then or else clause are evaluated lazily. They may be expressions that involve stored queries (i.e. queries stored using the LET keyword). These queries will not be evaluated if they are not needed.\nThis allows a query to cheaply branch. For example, if a parameter is given, then perform hash or upload to the server. See the\n   Arg Description Type     condition  Any (required)   then  LazyExpr (required)   else  LazyExpr    items Plugin\nEnumerate all members of the item (similar to Pythons items() method.\n   Arg Description Type     item The item to enumerate. Any    join Function\nJoin all the args on a separator.\nJoins the array into a string separated by the sep character.\n   Arg Description Type     array The array to join list of string (required)   sep The separator string    len Function\nReturns the length of an object.\n   Arg Description Type     list A list of items too filter Any (required)    log Function\nLog the message.\n   Arg Description Type     message Message to log. string (required)    lowcase Function\n   Arg Description Type     string A string to lower string (required)    max Function\nFinds the largest item in the aggregate.\nIt is only meaningful in a group by query.\nExample The following query lists all the processes and shows the largest bash pid of all bash processes.\nSELECT Name, max(items=Pid) as LargestPid from pslist() Where Name =~ \u0026#39;bash\u0026#39; group by Name    Arg Description Type     items  Any    min Function\nFinds the smallest item in the aggregate.\nIt is only meaningful in a group by query.\nExample The following query lists all the processes and shows the smallest bash pid of all bash processes.\nSELECT Name, min(items=Pid) as SmallestPid from pslist() Where Name =~ \u0026#39;bash\u0026#39; group by Name    Arg Description Type     items  Any    now Function\nReturns current time in seconds since epoch.\n   Arg Description Type     string A string to convert to int Any (required)    path_join Function\nBuild a path by joining all components.\n   Arg Description Type     components Path components to join. list of string (required)    query Function\nLaunch a subquery and materialize it into a list of rows.\n   Arg Description Type     vql  StoredQuery (required)    rand Function\nSelects a random number.\n   Arg Description Type     range Selects a random number up to this range. int64    read_file Function\nRead a file into a string.\n   Arg Description Type     length Max length of the file to read. int   filename One or more files to open. string (required)   accessor An accessor to use. string    scope Function\nreturn the scope.\nserialize Function\nEncode an object as a string (csv or json).\n   Arg Description Type     item The item to encode Any (required)   format Encoding format (csv,json) string    sleep Function\nSleep for the specified number of seconds. Always returns true.\n   Arg Description Type     time The number of seconds to sleep int64    split Function\nSplits a string into an array based on a regexp separator.\n   Arg Description Type     string The value to split string (required)   sep The serparator that will be used to split string (required)    str Function\nNormalize a String.\n   Arg Description Type     str The string to normalize Any (required)    strip Function\nStrip a prefix from a string.\n   Arg Description Type     string The string to strip string (required)   prefix The prefix to strip string (required)    tempdir Function\nCreate a temporary directory. The directory will be removed when the query ends.\n   Arg Description Type     data Data to write in the tempfile. list of string   extension An extension to place in the tempfile. string   permissions Required permissions (e.g. \u0026lsquo;x\u0026rsquo;). string   remove_last If set we delay removal as much as possible. bool    timestamp Function\nConvert from different types to a time.Time.\n   Arg Description Type     epoch  Any   winfiletime  int64   string Guess a timestamp from a string string   us_style US Style Month/Day/Year bool    to_dict Function\nConstruct a dict from another object.\nupcase Function\n   Arg Description Type     string A string to lower string (required)    url Function\nConstruct a URL or parse one.\nThis function parses or constructs URLs. A URL may be constructed from scratch by providing all the components or it may be parsed from an existing URL.\nThe returned object is a golang URL and can be serialized again using its String method.\nThis function is important when constructing parameters for certain accessors which receive a URL. For example the zip accessor requires its file names to consist of URLs. The Zip accessor interprets the URL in the following way:\n The scheme is the delegate accessor to use. The path is the delegate accessor\u0026rsquo;s filename The fragment is used by the zip accessor to retrieve the zip member itself.  In this case it is critical to properly escape each level - it is not possible in the general case to simply append strings. You need to use the url() function to build the proper url.\n   Arg Description Type     scheme The scheme to use string   host The host component string   path The path component string   fragment The fragment string   parse A url to parse string    utf16 Function\nParse input from utf16.\n   Arg Description Type     string A string to decode string (required)    utf16_encode Function\nEncode a string to utf16 bytes.\n   Arg Description Type     string A string to decode string (required)    uuid Function\nGenerate a UUID.\nversion Function\nGets the version of a VQL plugin or function.\nThis is useful when writing portable VQL which can work with older versions of Velociraptor. When Velociraptor plugins evolve in an incompatible way their version is incremented. It is possible to cater for multiple versions in the VQL using an if() plugin.\nFor example the following can chose from a legacy query or a modern query based on the plugin version:\n SELECT * FROM if( condition=version(plugin=\u0026quot;glob\u0026quot;) \u0026gt;= 1, then=NewQuery, else=LegacyQuery) "
}
 ,
{
    "uri": "/docs/vql_reference/windows/",
    "title": "Windows Specific Functionality",
    "tags": [],
    "description": "",
    "content": "Many VQL plugins and functions provide access to the Windows APIs. The following are only available when running on Windows.\nappcompatcache Plugin\nParses the appcompatcache.\nauthenticode Function\nThis plugin uses the Windows API to extract authenticode signature details from PE files.\nSince we use the windows API this can only work with the \u0026ldquo;file\u0026rdquo; accessor.\n   Arg Description Type     filename The filename to parse. string (required)    certificates Plugin\nCollect certificate from the system trust store.\ndns Plugin\nMonitor dns queries.\nThis plugin opens a raw socket and monitors network traffic for DNS questions and answers.\nWhen Velociraptor attempts to open a raw socket, sometimes Windows Defender treats that as suspicious behavior and quarantines the Velociraptor binary. This can be avoided by signing the binary which signals to Windows Defender that the binary is legitimate.\nIf you do not intend to build Velociraptor from source, use the official signed Velociraptor binaries which should not trigger alerts from Windows Defender.\n handles Plugin\nEnumerate process handles.\n   Arg Description Type     pid The PID to dump out. int64 (required)    interfaces Plugin\nList all active interfaces.\nlookupSID Function\nGet information about the SID.\n   Arg Description Type     sid A SID to lookup using LookupAccountSid string (required)    modules Plugin\nEnumerate Loaded DLLs.\n   Arg Description Type     pid The PID to dump out. int64 (required)    netstat Plugin\nCollect network information.\npartitions Plugin\nList all partititions\n   Arg Description Type     all If specified list all Partitions bool    proc_dump Plugin\nDumps process memory.\nDumps a process into a crashdump. The crashdump file can be opened with the windows debugger as normal. The plugin returns the filename of the crash dump which is a temporary file - the file will be removed when the query completes, so if you want to hold on to it, you should use the upload() plugin to upload it to the server or otherwise copy it.\n   Arg Description Type     pid The PID to dump out. int64 (required)    proc_yara Plugin\nScan processes using yara rules.\nThis plugin uses yara\u0026rsquo;s own engine to scan process memory for the signatures.\nProcess memory access depends on having the SeDebugPrivilege which depends on how Velociraptor was started. Even when running as System, some processes are not accessible.\n    Arg Description Type     rules Yara rules in the yara DSL. string (required)   files The list of files to scan. list of string (required)   accessor Accessor (e.g. NTFS) string   context How many bytes to include around each hit int   start The start offset to scan uint64   end End scanning at this offset (100mb) uint64   number Stop after this many hits (1). int64   blocksize Blocksize for scanning (1mb). int64   key If set use this key to cache the yara rules. string    read_reg_key Plugin\nThis is a convenience plugin which applies the globs to the registry accessor to find keys. For each key the plugin then lists all the values within it, and returns a row which has the value names as columns, while the cells contain the value\u0026rsquo;s stat info (and data content available in the Data field).\nThis makes it easier to access a bunch of related values at once.\n   Arg Description Type     globs Glob expressions to apply. list of string (required)   accessor The accessor to use. string    srum_lookup_id Function\nLookup a SRUM id.\n   Arg Description Type     file  string (required)   accessor The accessor to use. string   id  int64 (required)    token Function\nExtract process token.\n   Arg Description Type     pid The PID to get the token for. int64 (required)    users Plugin\nDisplay information about workstation local users. This is obtained through the NetUserEnum() API.\nvad Plugin\nEnumerate process memory regions.\n   Arg Description Type     pid The PID to dump out. int64 (required)    winobj Plugin\nEnumerate The Windows Object Manager namespace.\n   Arg Description Type     path Object namespace path. string    wmi Plugin\nExecute simple WMI queries synchronously.\nThis plugin issues a WMI query and returns its rows directly. The exact format of the returned row depends on the WMI query issued.\nThis plugin creates a bridge between WMI and VQL and it is a very commonly used plugin for inspecting the state of windows systems.\n   Arg Description Type     query The WMI query to issue. string (required)   namespace The WMI namespace to use (ROOT/CIMV2) string    "
}
 ,
{
    "uri": "/docs/vql_reference/parsers/",
    "title": "Parsers and data extractors",
    "tags": [],
    "description": "",
    "content": "Many Velociraptor artifacts rely on specialized parsing of file formats. This page outlines all the plugins and functions designed to allow the client to parse information for various files.\nSimple file formats may be parsed using regular expressions and other generic rules. However some specialized file formats have dedicated parsers. These dedicated parsers are exported into VQL plugins so their results may be used in further queries.\nbinary_parse Function\nParse a binary string with profile based parser.\nThis plugin extract binary data from strings. It works by applying a profile to the binary string and generating an object from that. Profiles use the same syntax as Rekall or Volatility. For example a profile might be:\n{ \u0026#34;StructName\u0026#34;: [10, { \u0026#34;field1\u0026#34;: [2, [\u0026#34;unsigned int\u0026#34;]], \u0026#34;field2\u0026#34;: [6, [\u0026#34;unsigned long long\u0026#34;]], }] } The profile is compiled and overlayed on top of the offset specified, then the object is emitted with its required fields.\n   Arg Description Type     offset Start parsing from this offset. int64   string The string to parse. string (required)   profile The profile to use. string   iterator An iterator to begin with. string   target The target type to fetch. string    binary_parse Plugin\nParse binary files using a profile.\nThis is the plugin version of the binary_parse() function.\n   Arg Description Type     offset Start parsing from this offset int64   file Filename to parse string (required)   accessor Accessor to use (e.g. ntfs, data) string   profile Profile to use. string   target The target to fetch. string (required)   args Args for the target class. Any   start The initial field in the target to fetch. string    grok Function\nParse a string using a Grok expression.\n   Arg Description Type     grok Grok pattern. string (required)   data String to parse. string (required)   patterns Additional patterns. Any    olevba Plugin\nExtracts VBA Macros from Office documents.\nThis plugin parses the provided files as OLE documents in order to recover VB macro code. A single document can have multiple code objects, and each such code object is emitted as a row.\n   Arg Description Type     file A list of filenames to open as OLE files. list of string (required)   accessor The accessor to use. string   max_size Maximum size of file we load into memory. int64    parse_auditd Plugin\nParse log files generated by auditd.\n   Arg Description Type     filename A list of log files to parse. list of string (required)   accessor The accessor to use. string    parse_csv Plugin\nParses events from a CSV file.\nParses records from a CSV file. We expect the first row of the CSV file to contain column names. This parser specifically supports Velociraptor\u0026rsquo;s own CSV dialect and so it is perfect for post processing already existing CSV files.\nThe types of each value in each column is deduced based on Velociraptor\u0026rsquo;s standard encoding scheme. Therefore types are properly preserved when read from the CSV file.\nFor example, downloading the results of a hunt in the GUI will produce a CSV file containing artifact rows collected from all clients. We can then use the parse_csv() plugin to further filter the CSV file, or to stack using group by.\nExample The following stacks the result from a Windows.Applications.Chrome.Extensions artifact:\nSELECT count(items=User) As TotalUsers, Name FROM parse_csv(filename=\u0026#34;All Windows.Applications.Chrome.Extensions.csv\u0026#34;) Order By TotalUsers Group By Name    Arg Description Type     filename CSV files to open list of string (required)   accessor The accessor to use string    parse_ese Plugin\nOpens an ESE file and dump a table.\n   Arg Description Type     file  string (required)   accessor The accessor to use. string   table A table name to dump string (required)    parse_evtx Plugin\nParses events from an EVTX file.\nThis plugin parses windows events from the Windows Event log files (EVTX).\nA windows event typically contains two columns. The EventData contains event specific structured data while the System column contains common data for all events - including the Event ID.\nYou should probably almost always filter by one or more event ids (using the System.EventID.Value field).\nExample SELECT System.TimeCreated.SystemTime as Timestamp, System.EventID.Value as EventID, EventData.ImagePath as ImagePath, EventData.ServiceName as ServiceName, EventData.ServiceType as Type, System.Security.UserID as UserSID, EventData as _EventData, System as _System FROM watch_evtx(filename=systemLogFile) WHERE EventID = 7045    Arg Description Type     filename A list of event log files to parse. list of string (required)   accessor The accessor to use. string   messagedb A Message database from https://github.com/Velocidex/evtx-data. string    parse_float Function\nConvert a string to a float.\n   Arg Description Type     string A string to convert to int Any (required)    parse_json Function\nParse a JSON string into an object.\nNote that when VQL dereferences fields in a dict it returns a Null for those fields that do not exist. Thus there is no error in actually accessing missing fields, the column will just return nil.\n   Arg Description Type     data Json encoded string. string (required)    parse_json_array Function\nParse a JSON string into an array.\nThis function is similar to parse_json() but works for a JSON list instead of an object.\n   Arg Description Type     data Json encoded string. string (required)    parse_json_array Plugin\nParses events from a line oriented json file.\n   Arg Description Type     data Json encoded string. string (required)    parse_jsonl Plugin\nParses a line oriented json file.\n   Arg Description Type     filename JSON file to open string (required)   accessor The accessor to use string    parse_lines Plugin\nParse a file separated into lines.\n   Arg Description Type     filename A list of log files to parse. list of string (required)   accessor The accessor to use. string    parse_mft Plugin\nScan the $MFT from an NTFS volume.\n   Arg Description Type     filename A list of event log files to parse. string (required)   accessor The accessor to use. string    parse_ntfs Function\nParse an NTFS image file.\n   Arg Description Type     device The device file to open. This may be a full path - we will figure out the device automatically. string (required)   inode The MFT entry to parse in inode notation (5-144-1). string   mft The MFT entry to parse. int64   mft_offset The offset to the MFT entry to parse. int64    parse_ntfs_i30 Plugin\nScan the $I30 stream from an NTFS MFT entry.\n   Arg Description Type     device The device file to open. This may be a full path - we will figure out the device automatically. string (required)   inode The MFT entry to parse in inode notation (5-144-1). string   mft The MFT entry to parse. int64   mft_offset The offset to the MFT entry to parse. int64    parse_ntfs_ranges Plugin\nShow the run ranges for an NTFS stream.\n   Arg Description Type     device The device file to open. This may be a full path - we will figure out the device automatically. string (required)   inode The MFT entry to parse in inode notation (5-144-1). string   mft The MFT entry to parse. int64   mft_offset The offset to the MFT entry to parse. int64    parse_pe Function\nParse a PE file.\n   Arg Description Type     file The PE file to open. string (required)   accessor The accessor to use. string    parse_records_with_regex Plugin\nParses a file with a set of regexp and yields matches as records. The file is read into a large buffer. Then each regular expression is applied to the buffer, and all matches are emitted as rows.\nThe regular expressions are specified in the Go syntax. They are expected to contain capture variables to name the matches extracted.\nFor example, consider a HTML file with simple links. The regular expression might be:\nregex='\u0026lt;a.+?href=\u0026quot;(?P\u0026lt;Link\u0026gt;[^\u0026quot;]+?)\u0026quot;' To produce rows with a column Link.\nThe aim of this plugin is to split the file into records which can be further parsed. For example, if the file consists of multiple records, this plugin can be used to extract each record, while parse_string_with_regex() can be used to further split each record into elements. This works better than trying to write a more complex regex which tries to capture a lot of details in one pass.\nExample Here is an example of parsing the /var/lib/dpkg/status files. These files consist of records separated by empty lines:\nPackage: ubuntu-advantage-tools Status: install ok installed Priority: important Section: misc Installed-Size: 74 Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Architecture: all Version: 17 Conffiles: /etc/cron.daily/ubuntu-advantage-tools 36de53e7c2d968f951b11c64be101b91 /etc/update-motd.d/80-esm 6ffbbf00021b4ea4255cff378c99c898 /etc/update-motd.d/80-livepatch 1a3172ffaa815d12b58648f117ffb67e Description: management tools for Ubuntu Advantage Ubuntu Advantage is the professional package of tooling, technology and expertise from Canonical, helping organisations around the world manage their Ubuntu deployments. . Subscribers to Ubuntu Advantage will find helpful tools for accessing services in this package. Homepage: https://buy.ubuntu.com The following query extracts the fields in two passes. The first pass uses parse_records_with_regex() to extract records in blocks, while using parse_string_with_regex() to further break the block into fields.\nSELECT parse_string_with_regex( string=Record, regex=[\u0026#39;Package:\\\\s(?P\u0026lt;Package\u0026gt;.+)\u0026#39;, \u0026#39;Installed-Size:\\\\s(?P\u0026lt;InstalledSize\u0026gt;.+)\u0026#39;, \u0026#39;Version:\\\\s(?P\u0026lt;Version\u0026gt;.+)\u0026#39;, \u0026#39;Source:\\\\s(?P\u0026lt;Source\u0026gt;.+)\u0026#39;, \u0026#39;Architecture:\\\\s(?P\u0026lt;Architecture\u0026gt;.+)\u0026#39;]) as Record FROM parse_records_with_regex( file=linuxDpkgStatus, regex=\u0026#39;(?sm)^(?P\u0026lt;Record\u0026gt;Package:.+?)\\\\n\\\\n\u0026#39;)    Arg Description Type     file A list of files to parse. list of string (required)   regex A list of regex to apply to the file data. list of string (required)   accessor The accessor to use. string    parse_string_with_regex Function\nParse a string with a set of regex and extract fields. Returns a dict with fields populated from all regex capture variables.\n   Arg Description Type     string A string to parse. string (required)   regex The regex to apply. list of string (required)    parse_xml Function\nParse an XML document into a dict like object.\n   Arg Description Type     file XML file to open. string (required)   accessor The accessor to use string    patch Function\nPatch a JSON object with a json patch or merge.\nThe function allows for modifications of objects by way of applying a json patch. You can read more about JSON patching here https://github.com/evanphx/json-patch.\nI practice you can use this to update server settings - for example, consider the client event monitoring state.\nSELECT get_client_monitoring() FROM scope() [ { \u0026#34;get_client_monitoring\u0026#34;: { \u0026#34;artifacts\u0026#34;: [ \u0026#34;Generic.Client.Stats\u0026#34; ] } } ] Suppose we wish to add a new artifact, we can patch it with the json:\n[{\u0026#34;op\u0026#34;: \u0026#34;add\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/artifacts/0\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Windows.Events.DNSQueries\u0026#34;}] This can then be immediately pushed to set_client_monitoring() to update the monitoring state.\nSELECT set_client_monitoring(value=patch( item=get_client_monitoring(), patch=[dict(op=\u0026quot;add\u0026quot;, path=\u0026quot;/artifacts/0\u0026quot;, value=\u0026quot;Windows.Events.DNSQueries\u0026quot;)])) FROM scope()    Arg Description Type     item The item to path Any (required)   patch A JSON Patch to apply Any   merge A merge-patch to apply Any    plist Function\nParse plist file\n   Arg Description Type     file A list of files to parse. string (required)   accessor The accessor to use. string    prefetch Plugin\nParses a prefetch file.\n   Arg Description Type     filename A list of event log files to parse. list of string (required)   accessor The accessor to use. string    regex_replace Function\nSearch and replace a string with a regexp. Note you can use $1 to replace the capture string.\n   Arg Description Type     source The source string to replace. string (required)   replace The substitute string. string (required)   re A regex to apply string (required)    rot13 Function\nApply rot13 deobfuscation to the string.\n   Arg Description Type     string  string    split_records Plugin\nParses files by splitting lines into records.\n   Arg Description Type     filenames Files to parse. list of string (required)   accessor The accessor to use string   regex The split regular expression (e.g. a comma) string (required)   columns If the first row is not the headers, this arg must provide a list of column names for each value. list of string   first_row_is_headers A bool indicating if we should get column names from the first row. bool   count Only split into this many columns if possible. int    sqlite Plugin\nOpens an SQLite file and run a query against it.\n   Arg Description Type     file  string (required)   accessor The accessor to use. string   query  string (required)   args  Any    "
}
 ,
{
    "uri": "/docs/vql_reference/server/",
    "title": "Server Side Functionality",
    "tags": [],
    "description": "",
    "content": "Velociraptor provides complete control of the server within VQL queries. On the server, the VQL engine contains the following plugins and functions. You can use this functionality to manage and automate the server by writing VQL queries.\nTo reuse server side artifacts, simply create an artifact with type: SERVER and launch it from the \u0026ldquo;Server Artifacts\u0026rdquo; screen in the GUI.\nartifact_definitions Plugin\nDump artifact definitions.\n   Arg Description Type     names Artifact definitions to dump list of string   deps If true includes all dependencies as well. bool   sanitize If true we remove extra metadata. bool    cancel_flow Function\nCancels the flow.\n   Arg Description Type     client_id  string (required)   flow_id  string    client_delete Plugin\nDelete all information related to a client.\n   Arg Description Type     client_id  string (required)   really_do_it  bool    client_info Function\nReturns client info (like the fqdn) from the datastore.\n   Arg Description Type     client_id  string (required)    clients Plugin\nRetrieve the list of clients.\n   Arg Description Type     search Client search string. Can have the following prefixes: \u0026lsquo;lable:\u0026rsquo;, \u0026lsquo;host:\u0026rsquo; string   client_id  string    collect_client Function\nLaunch an artifact collection against a client. If the client_id is \u0026ldquo;server\u0026rdquo; then the collection occurs on the server itself. In that case the caller needs the SERVER_ADMIN permission.\n   Arg Description Type     client_id The client id to schedule a collection on string (required)   artifacts A list of artifacts to collect list of string (required)   env Parameters to apply to the artifacts Any    compress Function\nCompress a file in the server\u0026rsquo;s FileStore. A compressed file is archived so it takes less space. It is still possible to see the file and read it but not to seek within it.\n   Arg Description Type     path A VFS path to compress list of string (required)    create_flow_download Function\nCreates a download pack for the flow.\n   Arg Description Type     client_id Client ID to export. string (required)   flow_id The flow id to export. string (required)   wait If set we wait for the download to complete before returning. bool    create_hunt_download Function\nCreates a download pack for a hunt.\n   Arg Description Type     hunt_id Hunt ID to export. string (required)   only_combined If set we only export combined results. bool   wait If set we wait for the download to complete before returning. bool    elastic_upload Plugin\nUpload rows to elastic.\n   Arg Description Type     query Source for rows to upload. StoredQuery (required)   threads How many threads to use. int64   index The name of the index to upload to. If not specified ensure a column is named \u0026lsquo;_index\u0026rsquo;. string   type The type of the index to upload to. string (required)   chunk_size The number of rows to send at the time. int64   addresses A list of Elasticsearch nodes to use. list of string   username Username for HTTP Basic Authentication. string   password Password for HTTP Basic Authentication. string   cloud_id Endpoint for the Elastic Service (https://elastic.co/cloud). string   api_key Base64-encoded token for authorization; if set, overrides username and password. string   wait_time Batch elastic upload this long (2 sec). int64    enumerate_flow Plugin\nEnumerate all the files that make up a flow.\n   Arg Description Type     client_id  string (required)   flow_id  string    file_store Function\nResolves file store paths into full filesystem paths.\nThis function is only available on the server. It can be used to find the backing file behind a filestore path so it can be passed on to an external program.\nVelociraptor uses the concept of a Virtual File System to manage the information about clients etc. The VFS path is a path into the file store. Of course ultimately (at least in the current implementation) the file store is storing files on disk, but the disk filename is not necessarily the same as the VFS path (for example non representable characters are escaped).\nYou can use the file_store() function to return the real file path on disk. This probably only makes sense for VQL queries running on the server which can independently open the file.\nIn future the file store may be abstracted (e.g. files may not be locally stored at all) and this function may stop working.\n   Arg Description Type     path A VFS path to convert list of string (required)    file_store_delete Function\nDelete file store paths into full filesystem paths.\n   Arg Description Type     path A VFS path to remove string (required)    flow_results Plugin\nRetrieve the results of a flow.\n   Arg Description Type     artifact The artifact to retrieve string   source An optional source within the artifact. string   flow_id The hunt id to read. string (required)   client_id The client id to extract string (required)    flows Plugin\nRetrieve the flows launched on each client.\n   Arg Description Type     client_id  string (required)   flow_id  string    get_client_monitoring Function\nRetrieve the current client monitoring state.\nget_server_monitoring Function\nRetrieve the current client monitoring state.\ngui_users Plugin\nRetrieve the list of users on the server.\nhunt Function\nLaunch an artifact collection against a client.\n   Arg Description Type     description Description of the hunt string (required)   artifacts A list of artifacts to collect list of string (required)   env Parameters to apply to the artifacts Any    hunt_flows Plugin\nRetrieve the flows launched by a hunt.\n   Arg Description Type     hunt_id The hunt id to inspect. string (required)    hunt_results Plugin\nRetrieve the results of a hunt.\n   Arg Description Type     artifact The artifact to retrieve string   source An optional source within the artifact. string   hunt_id The hunt id to read. string (required)   brief If set we return less columns. bool    hunts Plugin\nRetrieve the list of hunts.\ninventory Plugin\nRetrieve the tools inventory.\ninventory_add Function\nAdd tool to ThirdParty inventory.\n   Arg Description Type     tool  string (required)   serve_locally  bool   url  string   hash  string   filename  string    inventory_get Function\nGet tool info from inventory service.\n   Arg Description Type     tool  string (required)    label Function\nAdd the labels to the client. If op is \u0026lsquo;remove\u0026rsquo; then remove these labels.\n   Arg Description Type     client_id Client ID to label. string (required)   labels A list of labels to apply list of string (required)   op An operation on the labels (set, check, remove) string    mail Plugin\nSend Email to a remote server.\n   Arg Description Type     to Receipient of the mail list of string (required)   cc A cc for the mail list of string   subject The subject. string   body The body of the mail. string (required)   period How long to wait before sending the next mail - help to throttle mails. int64 (required)    monitoring Plugin\nExtract monitoring log from a client. If client_id is not specified we watch the global journal which contains event logs from all clients.\n   Arg Description Type     artifact The event artifact name to watch string (required)    rate Function\nCalculates the rate (derivative) between two quantities.\nFor example if a monitoring plugin returns an absolute value sampled in time (e.g. bytes transferred sampled every second) then the rate() plugin can calculate the average bytes/sec.\nThis function works by remembering the values of x and y from the previous row and applying the current rows values.\n   Arg Description Type     x The X float float64 (required)   y The Y float float64 (required)    sample Plugin\nExecutes \u0026lsquo;query\u0026rsquo; and samples every n\u0026rsquo;th row.\nThis is most useful on the server in order to downsample event artifact results.\n   Arg Description Type     query Source query. StoredQuery (required)   n Pick every n row from query. int64 (required)    search Plugin\nSearch the server client\u0026rsquo;s index.\n   Arg Description Type     query The query string. string   offset Skip this many results. uint64   limit Only return limited results uint64   type The type of search (e.g. \u0026lsquo;key\u0026rsquo;) string    set_client_monitoring Function\nSets the current client monitoring state.\n   Arg Description Type     value The Value to set Any (required)    set_server_monitoring Function\nSets the current server monitoring state.\n   Arg Description Type     value The Value to set Any (required)    source Plugin\nRetrieve rows from an artifact\u0026rsquo;s source.\nThis plugin is mostly useful in reports. It attempts to do the right thing automatically by inferring most parameters from its execution environment.\nFor example when called within a CLIENT report context, it will automatically fill its flow id, client id etc. Typically this means that you only need to specify the source name (for multi-source artifacts).\n   Arg Description Type     client_id The client id to extract string   day_name Only extract this day\u0026rsquo;s Monitoring logs (deprecated) string   start_time Start return events from this date (for event sources) int64   end_time Stop end events reach this time (event sources). int64   flow_id A flow ID (client or server artifacts) string   hunt_id Retrieve sources from this hunt (combines all results from all clients) string   artifact The name of the artifact collection to fetch string   source An optional named source within the artifact string   mode HUNT or CLIENT mode can be empty string    splunk_upload Plugin\nUpload rows to splunk.\n   Arg Description Type     query Source for rows to upload. StoredQuery (required)   threads How many threads to use. int64   url The Splunk Event Collector URL. string   token Splunk HEC Token. string   index The name of the index to upload to. string (required)   source The source field for splunk. If not specified this will be \u0026lsquo;velociraptor\u0026rsquo;. string   sourcetype The sourcetype field for splunk. If not specified this will \u0026lsquo;vql\u0026rsquo; string   chunk_size The number of rows to send at the time. int64   skip_verify Skip SSL verification(default: False). bool   wait_time Batch splunk upload this long (2 sec). int64    uploads Plugin\nRetrieve information about a flow\u0026rsquo;s uploads.\n   Arg Description Type     client_id The client id to extract string   flow_id A flow ID (client or server artifacts) string    "
}
 ,
{
    "uri": "/docs/vql_reference/plugin/",
    "title": "Client Side Functionality",
    "tags": [],
    "description": "",
    "content": "This page lists the plugins used to collect information from clients.\nVQL plugins are the data sources of VQL queries. While SQL queries refer to static tables of data, VQL queries refer to plugins, which generate data rows to be filtered by the query.\nUnlike SQL, VQL plugins also receive keyword arguments. When the plugin is evaluated it simply generates a sequence of rows which are further filtered by the query.\nThis allows VQL statements to be chained naturally since plugin args may also be other queries.\nVQL plugins are not the same as VQL functions. A plugin is the subject of the VQL query - i.e. plugins always follow the FROM keyword, while functions (which return a single value instead of a sequence of rows) are only present in column specification (e.g. after SELECT) or in condition clauses (i.e. after the WHERE keyword).\n chain Plugin\nChain the output of several queries into the same table. This plugin takes any args and chains them.\nExample The following returns the rows from the first query then the rows from the second query.\nSELECT * FROM chain( a={ SELECT ...}, b={ SELECT ...}) collect Plugin\nCollect artifacts into a local file.\n   Arg Description Type     artifacts A list of artifacts to collect. list of string (required)   output A path to write the output file on. string (required)   report A path to write the report on. string   args Optional parameters. Any   password An optional password to encrypt the collection zip. string   format Output format (csv, jsonl). string   artifact_definitions Optional additional custom artifacts. Any   template The name of a template artifact (i.e. one which has report of type HTML). string    environ Plugin\nThe row returned will have all environment variables as columns. If the var parameter is provided, only those variables will be provided.\n   Arg Description Type     vars Extract these variables from the environment and return them one per row list of string    execve Plugin\nThis plugin launches an external command and captures its STDERR, STDOUT and return code. The command\u0026rsquo;s stdout is split using the sep parameter as required.\nThis plugin is mostly useful for running arbitrary code on the client. If you do not want to allow arbitrary code to run, you can disable this by setting the prevent_execve flag in the client\u0026rsquo;s config file. Be aware than many artifacts require running external commands to collect their output though.\nWe do not actually transfer the external program to the system automatically. If you need to run programs which are not usually installed (e.g. Sysinternal\u0026rsquo;s autoruns.exe) you will need to map them from a share (requiring direct access to the AD domain) or download them using the http_client() plugin.\n   Arg Description Type     argv Argv to run the command with. list of string (required)   sep The serparator that will be used to split the stdout into rows. string   length Size of buffer to capture output per row. int64    filesystems Plugin\nflatten Plugin\nFlatten the columns in query. If any column repeats then we repeat the entire row once for each item.\n   Arg Description Type     Name  string    for Plugin\nIterate over a list.\n   Arg Description Type     var The variable to assign. string (required)   foreach The variable to iterate over. LazyExpr (required)   query Run this query over the item. StoredQuery    foreach Plugin\nExecutes \u0026lsquo;query\u0026rsquo; once for each row in the \u0026lsquo;row\u0026rsquo; query.\n   Arg Description Type     row A query or slice which generates rows. LazyExpr (required)   query Run this query for each row. StoredQuery (required)   async If set we run all queries asyncronously. bool    glob Plugin\nRetrieve files based on a list of glob expressions\nThe glob() plugin is one of the most used plugins. It applies a glob expression in order to search for files by file name. The glob expression allows for wildcards, alternatives and character classes. Globs support both forward and backslashes as path separators. They also support quoting to delimit components.\nA glob expression consists of a sequence of components separated by path separators. If a separator is included within a component it is possible to quote the component to keep it together. For example, the windows registry contains keys with forward slash in their names. Therefore we may use these to prevent the glob from getting confused:\nHKEY_LOCAL_MACHINE\\Microsoft\\Windows\\\u0026quot;Some Key With http://www.microsoft.com/\u0026quot;\\Some Value Glob expressions are case insensitive and may contain the following wild cards:\n The * matches one or more characters. The ? matches a single character. Alternatives are denoted by braces and comma delimited: {a,b} Recursive search is denoted by a **. By default this searches 3 directories deep. If you need to increase it you can add a depth number (e.g. **10)  By default globs do not expand environment variables. If you need to expand environment variables use the expand() function explicitly:\nglob(globs=expand(string=\u0026#34;%SystemRoot%\\System32\\Winevt\\Logs\\*\u0026#34;)) Example The following searches the raw NTFS disk for event logs.\nSELECT FullPath FROM glob( globs=\u0026#34;C:\\Windows\\System32\\Winevt\\Logs\\*.evtx\u0026#34;, accessor=\u0026#34;ntfs\u0026#34;) The root parameter If the root parameter is specified, we start globbing from this directory - i.e. the glob pattern is appended to the root parameter. The root parameter is useful if the directory name itself may contain glob characters.\n   Arg Description Type     globs One or more glob patterns to apply to the filesystem. list of string (required)   root The root directory to glob from (default \u0026lsquo;'). string   accessor An accessor to use. string    grep Function\nSearch a file for keywords.\n   Arg Description Type     path path to open. string (required)   accessor An accessor to use. string   keywords Keywords to search for. list of string (required)   context Extract this many bytes as context around hits. int    hash Function\nCalculate the hash of a file.\nThis function calculates the MD5, SHA1 and SHA256 hashes of the file.\n   Arg Description Type     path Path to open and hash. string (required)   accessor The accessor to use string    http_client Plugin\nMake a http request.\nThis plugin makes a HTTP connection using the specified method. The headers and parameters may be specified. The plugin reads the specified number of bytes per returned row.\nIf disable_ssl_security is specified we do not enforce SSL integrity. This is required to connect to self signed ssl web sites. For example many API handlers are exposed over such connections.\nWhen connecting to the Velociraptor frontend itself, even in self signed mode, we will ensure certs are properly verified. You can therefore safely export files from the Frontend\u0026rsquo;s public directory over self signed SSL. When connecting to a self signed Velociraptor frontend, we ensure the self signed certificate was issued by the Velociraptor internal CA - i.e. we pin the Frontend\u0026rsquo;s certificate in the binary.\n The http_client() plugin allows use to interact with any web services. If the web service returns a json blob, we can parse it with the parse_json() function (or parse_xml() for SOAP endpoints). Using the parameters with a POST method we may actually invoke actions from within VQL (e.g. send an SMS via an SMS gateway when a VQL event is received).So this is a very powerful plugin.\nWhen the tempfile_extension parameter is provided, the HTTP request body will be written to a tempfile with that extension. The name of this tempfile will be emitted as the Content column.\nThis plugin will emit rows with the following columns:\n Url string: The url we fetched. Content string: The body content for this chunk Response int: The HTTP response code (200=success)  Example The following VQL returns the client\u0026rsquo;s external IP as seen by the externalip service.\nSELECT Content as IP from http_client(url=\u0026#39;http://www.myexternalip.com/raw\u0026#39;)    Arg Description Type     url The URL to fetch string (required)   params Parameters to encode as POST or GET query strings Any   headers A dict of headers to send. Any   method HTTP method to use (GET, POST) string   chunk_size Read input with this chunk size and send each chunk as a row int   disable_ssl_security Disable ssl certificate verifications. bool   tempfile_extension If specified we write to a tempfile. The content field will contain the full path to the tempfile. string   remove_last If set we delay removal as much as possible. bool    if Plugin\nConditional execution of query\nThis function evaluates a condition. Note that the values used in the then or else clause are evaluated lazily. They may be expressions that involve stored queries (i.e. queries stored using the LET keyword). These queries will not be evaluated if they are not needed.\nThis allows a query to cheaply branch. For example, if a parameter is given, then perform hash or upload to the server. See the Windows.Search.FileFinder for an example of how if() is used.\n   Arg Description Type     condition  Any (required)   then  StoredQuery (required)   else  StoredQuery    info Plugin\nGet information about the running host.\nThis plugin returns a single row with information about the current system. The information includes the Hostname, Uptime, OS, Platform etc.\nThis plugin is very useful in preconditions as it restricts a query to certain OS or versions.\nint Function\nTruncate to an integer.\n   Arg Description Type     int The integer to round Any    ip Function\nFormat an IP address.\nConverts an ip address encoded in various ways. If the IP address is encoded as 32 bit integer we can use netaddr4_le or netaddr4_be to print it in a human readable way.\nThis currently does not support IPv6 addresses. Those are usually encoded as an array of 8 bytes which makes it easy to format using the format() function:\n format(format=\u0026quot;%x:%x:%x:%x:%x:%x:%x:%x\u0026quot;, value)    Arg Description Type     netaddr4_le A network order IPv4 address (as little endian). int64   netaddr4_be A network order IPv4 address (as big endian). int64    pslist Plugin\nEnumerate running processes.\nWhen specifying the pid this operation is much faster so if you are interested in specific processes, the pid should be specified. Otherwise, the plugin returns all processes one on each row.\n   Arg Description Type     pid A process ID to list. If not provided list all processes. int64    read_file Plugin\nRead files in chunks.\nThis plugin reads a file in chunks and returns each chunks as a separate row.\nIt is useful when we want to report file contents for small files like configuration files etc.\nThe returned row contains the following columns: data, offset, filename\n   Arg Description Type     chunk length of each chunk to read from the file. int   max_length Max length of the file to read. int   filenames One or more files to open. list of string (required)   accessor An accessor to use. string    scope Plugin\nThe scope plugin returns the current scope as a single row.\nThe main use for this plugin is as a NOOP plugin in those cases we dont want to actually run anything.\nExample SELECT 1+1 As Two FROM scop() stat Plugin\nGet file information. Unlike glob() this does not support wildcards.\n   Arg Description Type     filename One or more files to open. list of string (required)   accessor An accessor to use. string    switch Plugin\nExecutes each query. The first query to return any rows will be emitted.\ntempfile Function\nCreate a temporary file and write some data into it.\nThe file will be automatically removed when the query completes.\n   Arg Description Type     data Data to write in the tempfile. list of string   extension An extension to place in the tempfile. string   permissions Required permissions (e.g. \u0026lsquo;x\u0026rsquo;). string   remove_last If set we delay removal as much as possible. bool    upload Function\nUpload a file to the upload service. For a Velociraptor client this will upload the file into the flow and store it in the server\u0026rsquo;s file store.\nIf Velociraptor is run locally the file will be copied to the --dump_dir path or added to the triage evidence container.\n   Arg Description Type     file The file to upload string (required)   name The name of the file that should be stored on the server string   accessor The accessor to use string    upload Plugin\nUpload files to the server.\nThis plugin uploads the specified file to the server. If Velociraptor is run locally the file will be copied to the --dump_dir path or added to the triage evidence container.\nThis functionality is also available using the upload() function which might be somewhat easier to use.\n   Arg Description Type     files A list of files to upload list of string (required)   accessor The accessor to use string    upload_gcs Function\nUpload files to GCS.\n   Arg Description Type     file The file to upload string (required)   name The name of the file that should be stored on the server string   accessor The accessor to use string   bucket The bucket to upload to string (required)   project The project to upload to string (required)   credentials The credentials to use string (required)    upload_s3 Function\nUpload files to S3.\n   Arg Description Type     file The file to upload string (required)   name The name of the file that should be stored on the server string   accessor The accessor to use string   bucket The bucket to upload to string (required)   region The region the bucket is in string (required)   credentialskey The AWS key credentials to use string (required)   credentialssecret The AWS secret credentials to use string (required)    write_csv Plugin\nWrite a query into a CSV file.\n   Arg Description Type     filename CSV files to open string (required)   accessor The accessor to use string   query query to write into the file. StoredQuery (required)    yara Plugin\nScan files using yara rules.\nThe yara() plugin applies a signature consisting of multiple rules across files. You can read more about yara rules. The accessor is used to open the various files which allows this plugin to work across raw ntfs, zip members etc.\nScanning proceeds by reading a block from the file, then applying the yara rule on the block. This will fail if the signature is split across block boundary. You can choose the block size to be appropriate.\nNote that because we are just scanning the file data, yara plugins like the pe plugin will not work. You can emulate all the yara plugins with VQL anyway (e.g. to test for pe headers)\nTypically the yara rule does not change for the life of the query, so we cache it to avoid having to recompile it each time. The key variable can be used to uniquely identify the cache key for the rule. If the key variable is not specified, we use the rule text itself to generate the cache key. It is recommended that the key parameter be specified because it makes it more efficient.\nShorthand rules This plugin accepts yara rules in the rules parameter. But typically we only search for keywords so writing a full yara syntax rule is tedious. Therefore we provide a shorthand way to specify the keywords. For example:\nwide nocase:foo,bar,baz When the rule is provided in the above form, the plugin will automatically generate a yara rule which matches any of the specified keywords. The specification before the : means the same thing as the yara DSL and the following combinations are supported wide, wide ascii, wide nocase, wide nocase ascii.\nBy default only the first 100mb of the file are scanned and scanning stops after one hit is found.\n    Arg Description Type     rules Yara rules in the yara DSL. string (required)   files The list of files to scan. list of string (required)   accessor Accessor (e.g. NTFS) string   context How many bytes to include around each hit int   start The start offset to scan uint64   end End scanning at this offset (100mb) uint64   number Stop after this many hits (1). int64   blocksize Blocksize for scanning (1mb). int64   key If set use this key to cache the yara rules. string    "
}
 ,
{
    "uri": "/docs/vql_reference/event/",
    "title": "Event Plugins",
    "tags": [],
    "description": "",
    "content": "VQL Event plugins are plugins which never terminate - but instead generate rows based on events. Event plugins are useful for creating client monitoring artifacts. Currently, client side monitoring artifacts are specified in the Events section of the server configuration file. When clients connect to the server, they receive a list of monitoring artifacts they are to run. The client runs all artifacts in parallel and their results are streamed to the server.\nclock Plugin\nGenerate a timestamp periodically. This is mostly useful for event queries.\nThis plugin generates events periodically. The periodicity can be controlled either via the period or the ms parameter. Each row will be a go time.Time object. You can access its unix epoch time with the Sec column.\nExample The following will generate an event every 10 seconds.\nSELECT Sec FROM clock(period=10) The start parameter can be used to schedule the plugin to start at a particular time. This can be an integer (which will be interpreted as seconds since the epoch), a string or a time value.\n   Arg Description Type     start Start at this time. Any   period Wait this many seconds between events. int64   ms Wait this many ms between events. int64    diff Plugin\nExecutes \u0026lsquo;query\u0026rsquo; periodically and emit differences from the last query.\nThe diff() plugin runs a non-event query periodically and calculates the difference between its result set from the last run.\nThis can be used to create event queries which watch for changes from simpler non-event queries.\nThe key parameter is the name of the column which is used to determine row equivalency.\nThere is only a single equivalence row specified by the key parameter, and it must be a string. If you need to watch multiple columns you need to create a new column which is the concatenation of other columns. For example format(format=\u0026quot;%s%d\u0026quot;, args=[Name, Pid])\n Example The following VQL monitors all removable drives and lists files on newly inserted drives, or files that have been added to removable drives.\nLET removable_disks = SELECT Name AS Drive, Size FROM glob(globs=\u0026#34;/*\u0026#34;, accessor=\u0026#34;file\u0026#34;) WHERE Data.Description =~ \u0026#34;Removable\u0026#34; LET file_listing = SELECT FullPath, timestamp(epoch=Mtime.Sec) As Modified, Size FROM glob(globs=Drive+\u0026#34;\\\\**\u0026#34;, accessor=\u0026#34;file\u0026#34;) LIMIT 1000 SELECT * FROM diff( query={ SELECT * FROM foreach(row=removable_disks, query=file_listing) }, key=\u0026#34;FullPath\u0026#34;, period=10) WHERE Diff = \u0026#34;added\u0026#34;    Arg Description Type     query Source for cached rows. StoredQuery (required)   key The column to use as key. string (required)   period Number of seconds between evaluation of the query. int64    fifo Plugin\nExecutes \u0026lsquo;query\u0026rsquo; and cache a number of rows from it. For each invocation we present the set of past rows.\nThe fifo() plugin allows for VQL queries to apply across historical data. The fifo plugin accepts another event query as parameter, then retains the last max_rows rows from it in an internal queue. Every subsequent evaluation from the query will return the full set of rows in the queue. Older rows are expired from the queue according to the max_age parameter.\nFifos are usually used to form queries that look for specific pattern of behavior. For example, a successful logon followed by failed logons. In this case the fifo retains the recent history of failed logons in its internal queue, then when a successful logon occurs we can check the recent failed ones in its queue.\nExample The following checks for 5 failed logons followed by a successful logon.\nLET failed_logon = SELECT EventData as FailedEventData, System as FailedSystem FROM watch_evtx(filename=securityLogFile) WHERE System.EventID.Value = 4625 LET last_5_events = SELECT FailedEventData, FailedSystem FROM fifo(query=failed_logon, max_rows=500, max_age=atoi(string=failedLogonTimeWindow)) LET success_logon = SELECT EventData as SuccessEventData, System as SuccessSystem FROM watch_evtx(filename=securityLogFile) WHERE System.EventID.Value = 4624 SELECT * FROM foreach( row=success_logon, query={ SELECT SuccessSystem.TimeCreated.SystemTime AS LogonTime, SuccessSystem, SuccessEventData, enumerate(items=FailedEventData) as FailedEventData, FailedSystem, count(items=SuccessSystem) as Count FROM last_5_events WHERE FailedEventData.SubjectUserName = SuccessEventData.SubjectUserName GROUP BY LogonTime }) WHERE Count \u0026gt; atoi(string=failureCount)    Arg Description Type     query Source for cached rows. StoredQuery (required)   max_age Maximum number of seconds to hold rows in the fifo. int64   max_rows Maximum number of rows to hold in the fifo. int64    watch_auditd Plugin\nWatch log files generated by auditd.\n   Arg Description Type     filename A list of log files to parse. list of string (required)   accessor The accessor to use. string    watch_csv Plugin\nWatch a CSV file and stream events from it. Note: This is an event plugin which does not complete.\nThis plugin is the event version of parse_csv(). When the CSV file grows this plugin will emit the new rows.\n   Arg Description Type     filename CSV files to open list of string (required)   accessor The accessor to use string    watch_evtx Plugin\nWatch an EVTX file and stream events from it.\nThis is the Event plugin version of parse_evtx().\nIt often takes several seconds for events to be flushed to the event log and so this plugin\u0026rsquo;s event may be delayed. For some applications this results in a race condition with the event itself - for example, files mentioned in the event may already be removed by the time the event is triggered.\n    Arg Description Type     filename A list of event log files to parse. list of string (required)   accessor The accessor to use. string   messagedb A Message database from https://github.com/Velocidex/evtx-data. string    watch_monitoring Plugin\nWatch clients' monitoring log. This is an event plugin. This plugin will produce events from all clients.\n   Arg Description Type     artifact The event artifact name to watch string (required)    watch_syslog Plugin\nWatch a syslog file and stream events from it.\n   Arg Description Type     filename A list of log files to parse. list of string (required)   accessor The accessor to use. string    wmi_events Plugin\nExecutes an evented WMI queries asynchronously.\nThis plugin sets up a WMI event listener query.\n   Arg Description Type     query WMI query to run. string (required)   namespace WMI namespace string (required)   wait Wait this many seconds for events and then quit. int64 (required)    "
}
 ,
{
    "uri": "/docs/vql_reference/experimental/",
    "title": "Experimental Functionality",
    "tags": [],
    "description": "",
    "content": "Velociraptor is evolving quickly. We sometime implement functionality which may not remain in Velociraptor. This page documents some of the experimental features. If you find them useful, please let us know!\n"
}
 ]
