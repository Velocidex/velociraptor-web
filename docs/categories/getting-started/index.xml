<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>getting started on Velociraptor / Dig deeper</title>
    <link>/categories/getting-started/</link>
    <description>Recent content in getting started on Velociraptor / Dig deeper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/categories/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tutorial</title>
      <link>/docs/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorial/</guid>
      <description>In this tutorial we will deploy Velociraptor locally to our machine, and connect a client to it. This is the bare minimum required to demonstrate Velociraptor&amp;rsquo;s capabilities and walk through the GUI.
Velociraptor can be used in a number of different ways, but in this tutorial we will use it as an end point visibility tool, collect some artifacts and set up endpoint monitoring.
Overview Before we start it is useful to see how a Velociraptor deployment looks at a high level:</description>
    </item>
    
    <item>
      <title>Triaging</title>
      <link>/docs/getting-started/triaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/triaging/</guid>
      <description>We can use Velociraptor to hunt for many artifacts across the network. However ultimately, the Velociraptor agent simply runs VQL to collect its artifacts. What if we can just collect the artifacts interactive?
We certainly can do this!
Triaging a system. When triaging a system our goal is to collect and preserve as much data from the system as possible, as quickly as possible.
First lets see what artifacts come built in with Velociraptor:</description>
    </item>
    
  </channel>
</rss>